---
title: "Senescence"
author: "Melina"
date: "3/29/2023"
execute:
  echo: true #will keep code chunks
  warning: false #removes warning functions
format:
  html:
    self-contained: true #makes one html file to render that is sharable
    page-layout: full #uses the full page
    code-fold: true #lets user fold up codes
    code-tools: true #makes an option in the upper left for users to reveal/hide all code and copy source code
    #makes long lines of code rap
    code-overflow: wrap
    #makes table of contents
    toc: true
    #sets location of table of contents
    toc-location: left
#set theme settings. in this case user can switch between light and dark mode
theme:
  #give light option
  light: flatly
  #give dark option
  dark: darkly
---

## Data description

\[MELINA: describe the data and how it was collected here (basically the first part of your methods)\]

## Data Import and Cleaning

First we import all carbon and nitrogen content data from leaves pre- and post-drought.

```{r}
rawdata <- read.csv("N_C_Data.csv", header = T)
```

Here below we go through several data cleaning steps.

```{r}
# use dplyr to "select" only the columns we need (ID, c and n weight percent)
library(dplyr)
selected_data <- rawdata %>%
  select(Samp_ID, ends_with("_p"))


# To view data, run: view(selected_data)

# use dplyr to "filter" out (remove) non-costus data rows (e.g. Bypass)
# not filtering out everything - need to remove all Apple* Oregano* capsule*
#filtered_data <- selected_data %>%
#  filter(!(Samp_ID %in% c("Atropine", "Bypass", "Blank","Apple leaf")))
# above code doesn't remove all extra data, leaves 731 obs. 


rinsed_data <- filtered_data3 %>%
  filter(!(Samp_ID %in% c("oregano 1", "Apple leaves", "apple leaf")))

 rinsed_data <- filtered_data3 %>%
   filter(!(Samp_ID %in% c("oregano 1", "Apple leaves", "apple leaf")))


selected_data2 <- filtered_data3 %>%
  filter(!(Samp_ID %in% c("Oregano 1", "Oregano 2", "Oregano 3", "Oregano 4", "Oregano 5", "Oregano 6", "Oregano 7")))


# try filtering to only include those with *GREEN* *DRY* *DEAD*
# Eliminate everything BUT samples with *ALLE* and *VILL*

library(stringr)
useful_data <- selected_data2 %>%
  filter(str_detect(Samp_ID, "DRY|DEAD|GREEN"))


useful_data2 <- useful_data %>%
  filter(!str_detect(Samp_ID, "^(165|251|168|169)"))

#leads to 110 entries

# Try converting DRY to DEAD (or visa versa). 

useful_data <- useful_data2 %>%
  mutate(Samp_ID = gsub("DRY", "DEAD", Samp_ID))

# Split the Sample ID column so we have a true sample ID column and a separate green_dry column

install.packages("tidyr") 
library(tidyr)
useful_data2 <- useful_data %>%
  separate(Samp_ID, into = c("Green", "DRY"), sep = " ", remove = FALSE, extra = "drop")

## later: 
# Try using reshape from dplyr to get all data from one sample onto one row
# Create a new column with 'mutate' from 'dplyr' that applies the senescence eqation to the leaf N data

```

\
\

The `echo: false` option disables the printing of code (only output is displayed).
