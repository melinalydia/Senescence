---
title: "Senescence"
author: "Melina"
date: "3/29/2023"
execute:
  echo: true #will keep code chunks
  warning: false #removes warning functions
format:
  html:
    self-contained: true #makes one html file to render that is sharable
    page-layout: full #uses the full page
    code-fold: true #lets user fold up codes
    code-tools: true #makes an option in the upper left for users to reveal/hide all code and copy source code
    #makes long lines of code rap
    code-overflow: wrap
    #makes table of contents
    toc: true
    #sets location of table of contents
    toc-location: left
#set theme settings. in this case user can switch between light and dark mode
theme:
  #give light option
  light: flatly
  #give dark option
  dark: darkly
---
load necessary packages:
```{r}
library(dplyr) # load dplyr
```

## Data description

\[MELINA: describe the data and how it was collected here (basically the first part of your methods)\]

## Data Import and Cleaning

First we import the second batch of carbon and nitrogen content data from leaves pre- and post-drought.

```{r}
# rawdata <- read.csv("N_C_Data2.csv", header = T)
```

Below, we go through several data cleaning steps for a subset of the C and N data, focusing on differences just between C and N absorption from leaves during drought.

```{r}
# use dplyr to "select" only the columns we need (ID, c and n weight percent)
# library(dplyr) # load dplyr
# selected_data <- rawdata %>%
#   select(info, Samp_ID, ends_with("_p"))
# 
# # To view data, run: View(selected_data)
# 
# # install stringer first to use str_detect 
# library(stringr)
# 
# # filter out unneeded rows
# filtered_data <- selected_data %>%
#   # us str_detect to only include rows with 'GREEN', 'DRY' or 'DEAD' in Samp_ID
#   filter(str_detect(Samp_ID, "DRY|DEAD|GREEN")) #%>%
#   # Only include rows with ALLE and VILL
# #  filter(str_detect(Samp_ID, "ALLE|VILL"))
# # this leaves 107 entries 
#   
# # removed code because redundant with step selecting rows with green/dry/dead:
# # use dplyr to "filter" out (remove) non-costus data rows (e.g. Bypass)
# #  filter(!(Samp_ID %in% c("Atropine", "Bypass", "Blank","Apple leaf","Oregano 1", "Oregano 2", "Oregano 3", "Oregano 4", "Oregano 5", "Oregano 6", "Oregano 7", "Apple leaves", "apple leaf"))) %>% # leaves 691 entries 
#   
# # Convert DRY to DEAD (or visa versa). 
# named_right_data <- filtered_data %>%
#   mutate(Samp_ID = gsub("DRY", "DEAD", Samp_ID))
# 
# # Split the Sample ID column so we have a true sample ID column and a separate green_dead column
# library(tidyr)
# clean_long <- named_right_data %>%
#   separate(Samp_ID, into = c("ID", "GREENvDEAD"), sep = "(?<=\\-)(?!.*\\-)", remove = T) %>% 
#   separate(info, into = c("rm", "dateplus"), sep = "_", extra = "merge", remove = T) %>%
#   separate(dateplus, into = c("date", "rm2"), sep = " ", remove = T) %>% 
#   mutate(species = 
#            case_when(
#     grepl("VILL", ID) ~ "VILL",
#     grepl("ALLE", ID) ~ "ALLE",
#     TRUE ~ "F3")) %>% 
#   select(species, ID, date, GREENvDEAD, ends_with("_p"))
# 
# # remove tailing "-" from new ID 
# 
# clean_long$ID <- substr(clean_long$ID, 1, nchar(clean_long$ID)-1)


# print dataframe to ensure matching IDs for GREEN and DEAD.
#write.csv(clean_long, "clean_long_C_N_subset.csv", row.names = FALSE)

## later: 
# Try using reshape from dplyr to get all data from one sample onto one row
# Create a new column with 'mutate' from 'dplyr' that applies the senescence eqation to the leaf N data

```

Analysis and plotting!

```{r}
#Importing Nitrogen Data 
full_clean <- read.csv("full_lf_n_wide.csv", header = TRUE) 

#to filter for ALLE and VILL and then create a species column 
filtered_gnd <- full_clean %>%
  filter(grepl("^ALLE|^VILL", ID)) %>% 
  mutate(Species = ifelse(grepl("^ALLE", ID), "ALLE",
                          ifelse(grepl("^VILL", ID), "VILL", NA)))


# pivot the data wider so there is just one row per ID with all data from both green and post dry-down dead leaves
# full_clean_wide <- full_clean %>%
#   pivot_wider(
#     id_cols = c("species", "ID"),
#     names_from = c("GREENvDEAD"),
#     values_from = c("N_wght_p", "C_wght_p"),
#     names_sep = "_")

```       

```{r} initial analysis}

#INSTRUCITONS FOR MELINA
# First, use the species column to filter for only "ALLE" and "VILL"

# Next, use the mutate function from dplyr to calculate senescence based on the equation I sent, making a new column for the senescence value (maybe call it "sen" so we never have to type that out and risk misspelling it hahah)
```

# changing the chr to numerical data for carbon and for ID

```{r}
#full_clean$C_wght_p <- as.numeric(full_clean$C_wght_p)
#str(full_clean)

#invalid now ? 
```

```{r}
# Implimenting calculation of nitrogen sen for IDs 
library(dplyr)
sen_new <- filtered_gnd %>%
  group_by(ID, species) %>%
  summarise(sen_nitro = (1 - (N_wght_p[GREENvDEAD == "DEAD"] / N_wght_p[GREENvDEAD == "GREEN"])) * 100) 
  
# Filter for just alle or vill 
filtered_sen <- full_clean %>%
  filter(ID %in% c("ALLE", "VILL"))
# Make a violin plot with ggplot, species on x axis, sen_nitro on y axis - if you get a plot, play with the colors!
library(ggplot2)

custom_colors <- c("ALLE" = "#009E73", "VILL" = "#E69F00") 
nitrogenplot <- ggplot(filtered_gnd, aes(x = species, y = sen_nitro, fill = species)) +
  geom_violin() +
    geom_boxplot(width = 0.1) +  # Add boxplot with outliers
  scale_fill_manual(values = custom_colors, 
                    labels = c(ALLE = expression(italic("C. allenii")), 
                               VILL = expression(italic("C. villosissimus")))) +
  labs(title = "Nitrogen Reabsorbtion for Species",
       x = "Species",
       y = " % Percent Nitrogen Absorbed") +
  theme_bw() +
  guides(fill = guide_legend(override.aes = list(linetype = "blank")))

ggsave("nitrogenplot.png", plot, width = 6, height = 4, units = "in", dpi = 300)
   

# check colors with https://cran.r-project.org/web/packages/colorblindcheck/vignettes/intro-to-colorblindcheck.html
# example colorblind code check:library(colorblindcheck)
library(colorblindcheck)
palette_check(c("#202D8C",  "#4E589A","#FFD700", "#50be73"), plot = TRUE)

# Test for normality
# take difference between alle and vill - look at normality of difference with shapiro wilk test
shapiro_test <- by(filtered_sen$sen_nitro, filtered_sen$species, shapiro.test)
print(shapiro_test)

# Calculate percent difference
(62.93173/26.32518)*100-100

# Preliminary t test:
t.test(filtered_sen$sen_nitro~filtered_sen$species, alternative = "two.sided")

# look at data distribution
VILL_hist <-filtered_sen %>% 
  filter(species == "VILL") 
hist(VILL_hist$sen_nitro, breaks = 20)

ALLE_hist <-filtered_sen %>% 
  filter(species == "ALLE") 
hist(ALLE_hist$sen_nitro, breaks = 20)
```



```{r}
# Carbon Data Analysis 

Csen_new <- full_clean %>%
  group_by(ID, species) %>%
  summarise(sen_carbon = (1 - (C_wght_p[GREENvDEAD == "DEAD"] / C_wght_p[GREENvDEAD == "GREEN"])) * 100) 

# filtered for ALLE and VILL only
Cfiltered_sen <- Csen_new %>%
  filter(species %in% c("ALLE", "VILL"))

#Creation of Plot 
plot_bg_color <- "#0B1664"
panel_bg_color <- "#4E589A" 
legend_box_color <- "#4E589A"
text_color <- "#FFFFFF"
custom_colors <- c("ALLE" = "#009E73", "VILL" = "#E69F00") 
ggplot(Cfiltered_sen, aes(x = species, y = sen_carbon, fill = species)) +
  geom_violin() +
  scale_fill_manual(values = custom_colors) +
  stat_summary(fun = "mean", geom = "point", shape = 20, size = 3, color = "red", fill = "red") +
  labs(title = "Carbon Reabsorbtion for Species",
       x = "Species",
       y = "Percent Carbon Absorbed") +
  theme(
    plot.background = element_rect(fill = plot_bg_color),  
    panel.background = element_rect(fill = panel_bg_color),
    legend.background = element_rect(fill = legend_box_color),
    legend.key = element_rect(fill = legend_box_color), 
    text = element_text(color = text_color),
    axis.text.x = element_text(color = text_color),
    axis.text.y = element_text(color = text_color))


# statistical analysis for Carbon
shapiro_test <- by(Cfiltered_sen$sen_carbon, Cfiltered_sen$species, shapiro.test)
print(shapiro_test) 


#t-test
t.test(Cfiltered_sen$sen_carbon~Cfiltered_sen$species, alternative = "two.sided")

# Calculate percent difference
(-0.6153434/-1.4358660)*100-100 #0.428 times more 

```

#### Checking for (not) fully dried leaf bias
```{r}
compiled <- read.csv("F3_alle_vill_compiled_traits.csv", header = T)

compiled <- compiled %>% 
  select(type,N_wght_p_DEAD,date_end) %>% 
  filter(type != "F3")

compiled$date_end <- as.factor(compiled$date_end )

compiled_alle <- compiled %>% filter(type == "ALLE")
kruskal.test(compiled_alle$N_wght_p_DEAD ~ compiled_alle$date_end)

hist(compiled_alle$N_wght_p_DEAD, breaks =20)

partial_C_N <- read.csv("clean_wide_C_N.csv", header = T)

partial_C_N <- partial_C_N %>% 
  mutate(C_reabs = (1-(C_wght_p_DEAD/C_wght_p_GREEN))*100)

```

