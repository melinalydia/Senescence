---
title: "Senescence"
author: "Melina"
date: "3/29/2023"
execute:
  echo: true #will keep code chunks
  warning: false #removes warning functions
format:
  html:
    self-contained: true #makes one html file to render that is sharable
    page-layout: full #uses the full page
    code-fold: true #lets user fold up codes
    code-tools: true #makes an option in the upper left for users to reveal/hide all code and copy source code
    #makes long lines of code rap
    code-overflow: wrap
    #makes table of contents
    toc: true
    #sets location of table of contents
    toc-location: left
#set theme settings. in this case user can switch between light and dark mode
theme:
  #give light option
  light: flatly
  #give dark option
  dark: darkly
---

## Data description

\[MELINA: describe the data and how it was collected here (basically the first part of your methods)\]

## Data Import and Cleaning

First we import the second batch of carbon and nitrogen content data from leaves pre- and post-drought.

```{r}
rawdata <- read.csv("N_C_Data2.csv", header = T)
```

Below, we go through several data cleaning steps for a subset of the C and N data, focusing on differences just between C and N absorption from leaves during drought.

```{r}
# use dplyr to "select" only the columns we need (ID, c and n weight percent)
library(dplyr) # load dplyr
selected_data <- rawdata %>%
  select(info, Samp_ID, ends_with("_p"))

# To view data, run: View(selected_data)

# install stringer first to use str_detect 
library(stringr)

# filter out unneeded rows
filtered_data <- selected_data %>%
  # us str_detect to only include rows with 'GREEN', 'DRY' or 'DEAD' in Samp_ID
  filter(str_detect(Samp_ID, "DRY|DEAD|GREEN")) #%>%
  # Only include rows with ALLE and VILL
#  filter(str_detect(Samp_ID, "ALLE|VILL"))
# this leaves 107 entries 
  
# removed code because redundant with step selecting rows with green/dry/dead:
# use dplyr to "filter" out (remove) non-costus data rows (e.g. Bypass)
#  filter(!(Samp_ID %in% c("Atropine", "Bypass", "Blank","Apple leaf","Oregano 1", "Oregano 2", "Oregano 3", "Oregano 4", "Oregano 5", "Oregano 6", "Oregano 7", "Apple leaves", "apple leaf"))) %>% # leaves 691 entries 
  
# Convert DRY to DEAD (or visa versa). 
named_right_data <- filtered_data %>%
  mutate(Samp_ID = gsub("DRY", "DEAD", Samp_ID))

# Split the Sample ID column so we have a true sample ID column and a separate green_dead column
library(tidyr)
clean_long <- named_right_data %>%
  separate(Samp_ID, into = c("ID", "GREENvDEAD"), sep = "(?<=\\-)(?!.*\\-)", remove = T) %>% 
  separate(info, into = c("rm", "dateplus"), sep = "_", extra = "merge", remove = T) %>%
  separate(dateplus, into = c("date", "rm2"), sep = " ", remove = T) %>% 
  mutate(species = 
           case_when(
    grepl("VILL", ID) ~ "VILL",
    grepl("ALLE", ID) ~ "ALLE",
    TRUE ~ "F3")) %>% 
  select(species, ID, date, GREENvDEAD, ends_with("_p"))

# remove tailing "-" from new ID 

clean_long$ID <- substr(clean_long$ID, 1, nchar(clean_long$ID)-1)


# print dataframe to ensure matching IDs for GREEN and DEAD.
#write.csv(clean_long, "clean_long_C_N_subset.csv", row.names = FALSE)

## later: 
# Try using reshape from dplyr to get all data from one sample onto one row
# Create a new column with 'mutate' from 'dplyr' that applies the senescence eqation to the leaf N data

```

Analysis and plotting!

\`\`\`{r} import and clean full dataset} #Importing combined clean C and N data for plotting full_clean \<- read.csv("clean_long_C_N.csv", header = T)
```{r}
full_clean <- read.csv("clean_long_C_N.csv", header = T)
```

# pivot the data longer so there is just one row per ID with all data from both green and post dry-down dead leaves
```{r}
#full_clean_wide <- full_clean %\>% pivot_wider( id_cols = c("species", "ID"), names_from = c("GREENvDEAD"), values_from = c("N_wght_p", "C_wght_p"), names_sep = "\_")
```

full_clean_wide \<- full_clean %\>% pivot_wider( id_cols = c("species", "ID"), names_from = c("GREENvDEAD"), values_from = c("N_wght_p", "C_wght_p"), names_sep = "\_")

# Code I used to check for duplicates

# full_clean %\>%

# group_by(species, ID, GREENvDEAD) %\>%

# summarise(n = n(), .groups = "drop") %\>%

# filter(n \> 1L)

```         

```{r} initial analysis}

#INSTRUCITONS FOR MELINA
# First, use the species column to filter for only "ALLE" and "VILL"

# Next, use the mutate function from dplyr to calculate senescence based on the equation I sent, making a new column for the senescence value (maybe call it "sen" so we never have to type that out and risk misspelling it hahah)
```

# changing the chr to numerical data for carbon and for ID 
```{r}
```{r}
full_clean$C_wght_p <- as.numeric(full_clean$C_wght_p)
str(full_clean)
```

```{r}
#Implimenting calculation of nitrogen sen for IDs 
```{r}
sen_new <- full_clean %>%
  group_by(ID) %>%
  summarise(sen_nitro = (1 - (N_wght_p[GREENvDEAD == "DEAD"] / N_wght_p[GREENvDEAD == "GREEN"])) * 100) %>%
  
#this is my attempt to keep species with the data in sen_new however I did end up getting the values I just lost the rest of the columns 
  ungroup() %>%
  slice(1) %>%
  mutate(species = full_clean$species)
        
```

\
